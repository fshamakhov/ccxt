# -*- coding: utf-8 -*-

# PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
# https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

from ccxt.async_support.base.exchange import Exchange

# -----------------------------------------------------------------------------

try:
    basestring  # Python 3
except NameError:
    basestring = str  # Python 2
from ccxt.base.errors import ExchangeError


class bilaxy (Exchange):

    def describe(self):
        return self.deep_extend(super(bilaxy, self).describe(), {
            'id': 'bilaxy',
            'name': 'Bilaxy',
            'countries': ['CN'],  # Japan, Malta
            'rateLimit': 500,
            'has': {
                'fetchDepositAddress': False,
                'CORS': False,
                'fetchBidsAsks': True,
                'fetchTickers': True,
                'fetchOHLCV': False,
                'fetchMyTrades': False,
                'fetchOrder': True,
                'fetchOrders': True,
                'fetchOpenOrders': True,
                'fetchClosedOrders': True,
                'withdraw': False,
                'fetchFundingFees': False,
                'fetchDeposits': False,
                'fetchWithdrawals': False,
                'fetchTransactions': False,
            },
            'urls': {
                'logo': 'https://bilaxy.com/dist/images/logo.png',
                'api': {
                    'web': 'https://bilaxy.com',
                    'public': 'https://api.bilaxy.com/v1',
                    'private': 'https://api.bilaxy.com/v1',
                    'v1': 'https://api.bilaxy.com/v1',
                },
                'www': 'https://bilaxy.com',
                'doc': 'https://bilaxy.com/api',
            },
            'api': {
                'public': {
                    'get': [
                        'depth',
                        'coins',
                        'orders',
                        'ticker',
                        'tickers',
                    ],
                },
                'private': {
                    'get': [
                        'balances',
                        'coin_address',
                        'trade_list',
                        'trade_view',
                    ],
                    'post': [
                        'cancel_trade',
                        'trade',
                    ],
                },
            },
            'fees': {
                'trading': {
                    'tierBased': False,
                    'percentage': True,
                    'taker': 0.0015,
                    'maker': 0.0015,
                },
            },
            'bilaxySymbols': {},
        })

    async def fetch_markets(self, params={}):
        response = await self.publicGetCoins()
        markets = response['data']
        result = []
        for i in range(0, len(markets)):
            market = markets[i]
            id = market['name'] + market['group']
            baseId = market['name']
            quoteId = market['group']
            base = self.common_currency_code(baseId)
            quote = self.common_currency_code(quoteId)
            symbol = base + '/' + quote
            precision = {
                'base': market['priceDecimals'],
                'quote': market['priceDecimals'],
                'amount': market['priceDecimals'],
                'price': market['priceDecimals'],
            }
            active = True
            self.bilaxySymbols[symbol] = market['symbol']
            entry = {
                'id': id,
                'symbol': symbol,
                'base': base,
                'quote': quote,
                'baseId': baseId,
                'quoteId': quoteId,
                'info': market,
                'active': active,
                'precision': precision,
                'limits': {
                    'amount': {
                        'min': None,
                        'max': None,
                    },
                    'price': {
                        'min': None,
                        'max': None,
                    },
                    'cost': {
                        'min': 0.01,
                        'max': None,
                    },
                },
            }
            result.append(entry)
        return result

    def get_bilaxy_symbol(self, symbol):
        if self.bilaxySymbols is None:
            raise ExchangeError(self.id + ' markets not loaded')
        if (isinstance(symbol, basestring)) and(symbol in list(self.bilaxySymbols.keys())):
            return self.bilaxySymbols[symbol]
        raise ExchangeError(self.id + ' does not have market symbol ' + symbol)

    def get_symbol_from_bilaxy(self, symbol):
        if self.bilaxySymbols is None:
            raise ExchangeError(self.id + ' markets not loaded')
        keys = list(self.bilaxySymbols.keys())
        for i in range(0, len(keys)):
            id = keys[i]
            if self.bilaxySymbols[id] == symbol:
                return i
        raise ExchangeError(self.id + ' does not have market symbol')

    async def fetch_order_book(self, symbol, limit=None, params={}):
        bilaxy_symbol = self.get_bilaxy_symbol(symbol)
        request = {
            'symbol': bilaxy_symbol,
        }
        response = await self.publicGetDepth(self.extend(request, params))
        return self.parse_order_book(response['data'])

    def parse_ticker(self, symbol, ticker, market=None):
        last = self.safe_float(ticker, 'last')
        return {
            'symbol': symbol,
            'timestamp': None,
            'datetime': None,
            'high': self.safe_float(ticker, 'high'),
            'low': self.safe_float(ticker, 'low'),
            'bid': self.safe_float(ticker, 'buy'),
            'bidVolume': self.safe_float(ticker, 'vol'),
            'ask': self.safe_float(ticker, 'sell'),
            'askVolume': self.safe_float(ticker, 'vol'),
            'vwap': None,
            'open': None,
            'close': last,
            'last': last,
            'previousClose': None,
            'change': None,
            'percentage': None,
            'average': None,
            'baseVolume': None,
            'quoteVolume': None,
            'info': ticker,
        }

    async def fetch_ticker(self, symbol, params={}):
        bilaxy_symbol = await self.get_bilaxy_symbol(symbol)
        response = await self.publicGetTicker(self.extend({
            'symbol': bilaxy_symbol,
        }, params))
        await self.load_markets()
        market = self.market(symbol)
        return self.parse_ticker(symbol, response['data'], market)

    async def parse_tickers(self, rawTickers, symbols=None):
        await self.load_markets()
        tickers = []
        for i in range(0, len(rawTickers)):
            symbol = self.get_symbol_from_bilaxy(rawTickers[i]['symbol'])
            market = self.market(symbol)
            tickers.append(self.parse_ticker(symbol, rawTickers[i], market))
        return self.filter_by_array(tickers, 'symbol', symbols)

    async def fetch_tickers(self, symbols=None, params={}):
        await self.load_markets()
        rawTickers = await self.publicGetTickers(params)
        return await self.parse_tickers(rawTickers['data'], symbols)

    def sign(self, path, api='public', method='GET', params={}, headers=None, body=None):
        url = self.urls['api'][api]
        url += '/' + path
        if api == 'public':
            if params:
                url += '?' + self.urlencode(params)
        else:
            self.check_required_credentials()
            signature = self.urlencode(self.keysort(self.extend({
                'key': self.apiKey,
                'secret': self.secret,
            }, params)))
            signature = self.hash(self.encode(signature), 'sha1')
            query = self.urlencode(self.keysort(self.extend({
                'key': self.apiKey,
            }, params)))
            query += '&' + 'sign=' + signature
            if method == 'GET':
                url += '?' + query
            else:
                body = query
                headers['Content-Type'] = 'application/x-www-form-urlencoded'
        return {'url': url, 'method': method, 'body': body, 'headers': headers}
