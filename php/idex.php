<?php

namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception as Exception; // a common import

class idex extends Exchange {

    public function describe () {
        return array_replace_recursive (parent::describe (), array (
            'id' => 'idex',
            'name' => 'Idex',
            'countries' => array ( 'JP', 'MT' ), // Japan, Malta
            'rateLimit' => 500,
            'has' => array (
                'fetchDepositAddress' => false,
                'CORS' => false,
                'fetchBidsAsks' => true,
                'fetchTickers' => true,
                'fetchOHLCV' => false,
                'fetchMyTrades' => false,
                'fetchOrder' => true,
                'fetchOrders' => false,
                'fetchOpenOrders' => true,
                'fetchClosedOrders' => true,
                'withdraw' => false,
                'fetchFundingFees' => false,
                'fetchDeposits' => false,
                'fetchWithdrawals' => false,
                'fetchTransactions' => false,
            ),
            'urls' => array (
                'logo' => 'https://idex.market/assets/IDEX_sf-color.svg',
                'api' => array (
                    'web' => 'https://idex.market',
                    'public' => 'https://api.idex.market',
                    'private' => 'https://api.idex.market',
                ),
                'www' => 'https://idex.market',
                'doc' => 'https://docs.idex.market',
            ),
            'api' => array (
                'public' => array (
                    'get' => array (
                        'returnTicker', // "market" => "ETH_SAN"
                        'returnCurrencies',
                        'return24Volume',
                        'returnOrderBook', // "market" => "ETH_AURA", "count" => 1
                    ),
                    'post' => array (
                        'returnTicker', // "market" => "ETH_SAN"
                        'returnCurrencies',
                        'return24Volume',
                        'returnOrderBook', // "market" => "ETH_AURA", "count" => 1
                    ),
                ),
                'private' => array (
                    'post' => array (
                        'returnBalances', // "address" => "0x2a0c0dbecc7e4d658f48e01e3fa353f44050c208",
                        'returnCompleteBalances', // "address" => "0x2a0c0dbecc7e4d658f48e01e3fa353f44050c208"
                        'returnDepositsWithdrawals', // "address" => "0x2a0c0dbecc7e4d658f48e01e3fa353f44050c208", "start" => 0, "end" => 0
                        'returnOpenOrders', // "market" => "ETH_AURA", "address" => "0x2a0c0dbecc7e4d658f48e01e3fa353f44050c208", "count" => 10, "cursor" => "2228127"
                        'returnOrderStatus', // "orderHash" => "0x22a9ba7f8dd37ed24ae327b14a8a941b0eb072d60e54bcf24640c2af819fc7ec"
                        'returnOrderTrades', // "orderHash" => "0x22a9ba7f8dd37ed24ae327b14a8a941b0eb072d60e54bcf24640c2af819fc7ec"
                        'returnTradeHistory', // "market" => "ETH_AURA", "address" => "0x2dbdcec64db33e673140fbd0ceef610a273b84db", "start" => 5000, "end" => 10000, "sort" => "desc", "count" => 10, "cursor" => "1000"
                        'returnContractAddress', // "address" => "0x2a0c0dbecc7e4d658f48e01e3fa353f44050c208"
                        'returnNextNonce', // "address" => "0x2a0c0dbecc7e4d658f48e01e3fa353f44050c208"
                        'order', // https://github.com/AuroraDAO/idex-api-docs/blob/master/scripts/generate-order-payload.js
                        'cancel', // https://github.com/AuroraDAO/idex-api-docs/blob/master/scripts/generate-cancel-payload.js
                        'trade', // https://github.com/AuroraDAO/idex-api-docs/blob/master/scripts/generate-trade-payload.js
                        'withdraw',
                    ),
                ),
            ),
            'requiredCredentials' => array (
                'apiKey' => false,
                'secret' => false,
                'uid' => false,
                'login' => false,
                'password' => false,
                'twofa' => false, // 2-factor authentication (one-time password key)
                'privateKey' => true, // a "0x"-prefixed hexstring private key for a wallet
                'walletAddress' => true, // the wallet address "0x"-prefixed hexstring
                'token' => false, // reserved for HTTP auth in some cases,
                'idexContractAddress' => true,
            ),
            'fees' => array (
                'trading' => array (
                    'tierBased' => false,
                    'percentage' => true,
                    'taker' => 0.002,
                    'maker' => 0.001,
                ),
            ),
            'idexContractAddress' => null,
            'commonCurrencies' => array (
                'ACC' => 'Accelerator',
                'AIC' => 'AKAI',
                'AMB' => 'Amber',
                'BIO' => 'BioCrypt',
                'BLUE' => 'Ethereum Blue',
                'BST' => 'Blocksquare Token',
                'BTT' => 'Blocktrade Token',
                'CAT2' => 'BitClave',
                'CCC' => 'Container Crypto Coin',
                'CRE' => 'Carry',
                'CST' => 'Cryptosolartech',
                'EXO' => 'EXOLOVER',
                'GBX' => 'Globitex',
                'GENE' => 'Gene Source Code Chain',
                'GET' => 'GET Protocol',
                'GET2' => 'GET',
                'IPL' => 'InsurePal',
                'NTK2' => 'NetKoin',
                'ONE' => 'Menlo One',
                'ONG' => 'SoMee.Social',
                'PDX' => 'PdxToken',
                'PRO' => 'ProChain',
                'PRO2' => 'PRO',
                'SAT' => 'Satisfaction Token',
                'SET' => 'Swytch Energy Token',
                'SMT' => 'Sun Money Token',
                'TFT' => 'Travelling Free Token',
                'VNT' => 'Vanta Network',
                'WCT' => 'Wealth Chain Token',
            ),
            'currencyAddresses' => null,
        ));
    }

    public function get_currency ($currency = '') {
        if (is_array($this->currencyAddresses) && array_key_exists($currency, $this->currencyAddresses)) {
            return $this->currencyAddresses[$currency];
        }
        throw new ExchangeError('Exchange ' . $this->id . 'currency ' . $currency . ' not found');
    }

    public function fetch_markets ($params = array ()) {
        $this->currencyAddresses = $this->publicGetReturnCurrencies ($params);
        $response = $this->publicGetReturnTicker ();
        $symbols = is_array($response) ? array_keys($response) : array();
        $result = array();
        for ($i = 0; $i < count ($symbols); $i++) {
            $id = $symbols[$i];
            $market = $response[$id];
            $ids = explode('_', $id);
            $baseId = strtoupper($ids[1]);
            $quoteId = strtoupper($ids[0]);
            $baseCurrency = $this->get_currency ($baseId);
            $quoteCurrency = $this->get_currency ($quoteId);
            $base = $this->common_currency_code($baseId);
            $quote = $this->common_currency_code($quoteId);
            $symbol = $base . '/' . $quote;
            $precision = array (
                'base' => $baseCurrency['decimals'],
                'quote' => $quoteCurrency['decimals'],
            );
            $active = true;
            $entry = array (
                'id' => $id,
                'symbol' => $symbol,
                'base' => $base,
                'quote' => $quote,
                'baseId' => $baseId,
                'quoteId' => $quoteId,
                'info' => $market,
                'active' => $active,
                'precision' => $precision,
                'limits' => array (
                    'amount' => array (
                        'min' => null,
                        'max' => null,
                    ),
                    'price' => array (
                        'min' => null,
                        'max' => null,
                    ),
                    'cost' => array (
                        'min' => 0.15,
                        'max' => null,
                    ),
                ),
            );
            $result[] = $entry;
        }
        return $result;
    }

    public function fetch_order_book ($symbol, $limit = null, $params = array ()) {
        if ($limit === null) {
            $limit = 100;
        }
        $this->load_markets();
        $market = $this->market ($symbol);
        $request = array (
            'market' => $market['id'],
            'count' => $limit,
        );
        $order_book = $this->publicGetReturnOrderBook (array_merge ($request, $params));
        return $this->parse_order_book($order_book, null, 'bids', 'asks', 'price', 'amount');
    }

    public function parse_ticker ($symbol, $ticker, $market = null) {
        $last = $this->safe_float($ticker, 'last');
        return array (
            'symbol' => $symbol,
            'timestamp' => null,
            'datetime' => null,
            'high' => $this->safe_float($ticker, 'high'),
            'low' => $this->safe_float($ticker, 'low'),
            'bid' => $this->safe_float($ticker, 'highestBid'),
            'bidVolume' => null,
            'ask' => $this->safe_float($ticker, 'lowestAsk'),
            'askVolume' => null,
            'vwap' => null,
            'open' => null,
            'close' => $last,
            'last' => $last,
            'previousClose' => null,
            'change' => null,
            'percentage' => $this->safe_float($ticker, 'percentChange'),
            'average' => null,
            'baseVolume' => $this->safe_float($ticker, 'baseVolume'),
            'quoteVolume' => $this->safe_float($ticker, 'quoteVolume'),
            'info' => $ticker,
        );
    }

    public function fetch_ticker ($symbol, $params = array ()) {
        $this->load_markets();
        $market = $this->market ($symbol);
        $request = array (
            'market' => $market['id'],
        );
        $response = $this->publicGetReturnTicker (array_merge ($request, $params));
        return $this->parse_ticker($symbol, $response, $market);
    }

    public function parse_tickers ($rawTickers, $symbols = null) {
        $this->load_markets();
        $keys = is_array($rawTickers) ? array_keys($rawTickers) : array();
        $tickers = array();
        for ($i = 0; $i < count ($keys); $i++) {
            $id = $keys[$i];
            $ids = explode('_', $id);
            $baseId = strtoupper($ids[1]);
            $quoteId = strtoupper($ids[0]);
            $base = $this->common_currency_code($baseId);
            $quote = $this->common_currency_code($quoteId);
            $symbol = $base . '/' . $quote;
            $market = $this->market ($symbol);
            $tickers[] = $this->parse_ticker($symbol, $rawTickers[$id], $market);
        }
        return $this->filter_by_array($tickers, 'symbol', $symbols);
    }

    public function fetch_tickers ($symbols = null, $params = array ()) {
        $this->load_markets();
        $rawTickers = $this->publicGetReturnTicker ($params);
        return $this->parse_tickers ($rawTickers, $symbols);
    }

    public function sign ($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $url = $this->urls['api'][$api];
        $url .= '/' . $path;
        if ($method === 'GET') {
            if ($params)
                $url .= '?' . $this->urlencode ($params);
        } else {
            $headers['Content-Type'] = 'application/json';
            if ($api !== 'public') {
                $this->check_required_credentials();
            }
            $body = $this->json ($params);
        }
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }
}
